type User {
  id: Int
  email: String
}

type AuthPayload {
  access_token: String!
  email: String!
}

type Goal {
  id: Int
  title: String
  maxScore: Int
  minScore: Int
  actualScore: Int
  userIdRef: Int
  timestamp: Int
  user: User
}

input GoalScoreInput {
  id: Int
  newCurrentScore: Int
}

# needs a resolver function that outputs a string https://www.apollographql.com/blog/backend/architecture/schema-first-vs-code-only-graphql/
type Query {
  hello: String!
  userGoals: [Goal]
}

type Mutation {
  register(email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  incrementScore(inputStuff: GoalScoreInput): Goal
  decrementScore(inputStuff: GoalScoreInput): Goal
  resetScore(goalId: Int!): Goal
  deleteGoal(goalId: Int!): Goal
  createGoal(goalTitle: String!, maxScore: Int!): Goal
  # editGoalTitle(goal: Goal): Goal
}
